import matplotlib.pyplot as plt
import numpy as np
import os

def get_data(dataset="CIFAR10" , ac=31, update_mode="both"):
    if dataset == "CIFAR10":
        if ac == 31:
            if update_mode == "both":
                main_task_acc = [85.33, 85.30, 85.36, 85.23, 85.24, 85.11, 85.08, 84.49, 70.75, 70.59, 70.14, 68.75, 50.38, 32.92, 33.39, 33.95, 35.60, 36.25, 36.33, 33.75, 33.36, 27.93, 28.44, 29.88, 29.16, 30.47, 30.55, 30.18, 31.74, 31.38, 31.74]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]
            elif update_mode == "bottom_only":
                main_task_acc = [85.33, 85.28, 85.28, 85.31, 85.29, 85.38, 85.26, 85.11, 85.32, 85.29, 85.29, 85.30, 85.28, 85.32, 85.15, 85.30, 85.30, 85.33, 85.24, 85.21, 85.31, 85.26, 85.16, 85.19, 85.33, 85.32, 85.33, 85.34, 85.32, 85.34, 85.30]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[1]":
                main_task_acc = [85.33, 85.33, 85.33, 85.31, 85.21, 85.39, 85.25, 85.12, 85.26, 85.13, 85.06, 84.91, 85.03, 84.66, 84.65, 84.59, 84.37, 84.42, 84.22, 84.04, 83.86, 83.64, 83.55, 83.12, 82.78, 82.28, 81.82, 81.04, 79.95, 78.63, 77.53]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[2]":
                main_task_acc = [85.33, 85.31, 85.34, 85.26, 85.26, 85.24, 85.21, 85.17, 85.14, 85.20, 85.08, 84.94, 84.95, 84.77, 84.68, 84.61, 84.45, 84.42, 84.20, 84.31, 83.92, 83.79, 83.30, 82.93, 82.90, 82.53, 82.31, 81.49, 81.08, 80.19, 79.53]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[3]":
                main_task_acc = [85.33, 85.32, 85.36, 85.32, 85.33, 85.26, 85.29, 85.21, 85.23, 85.16, 85.15, 84.94, 84.87, 84.48, 84.02, 82.84, 81.25, 78.27, 74.17, 68.36, 63.03, 57.27, 51.27, 45.97, 39.47, 35.05, 30.67, 28.53, 25.91, 24.67, 23.11]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 44.46, 0.00, 0.00, 0.00, 0.00]
            elif update_mode == "top_only_[4]":
                main_task_acc = [85.33, 85.24, 85.35, 85.26, 85.19, 85.40, 85.35, 85.24, 85.36, 85.29, 85.20, 85.17, 85.04, 85.31, 85.35, 85.35, 85.17, 85.40, 85.27, 85.26, 85.16, 85.13, 85.04, 85.03, 85.21, 85.07, 85.06, 84.87, 85.08, 84.84, 85.10]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[1,2]":
                main_task_acc = [85.33, 85.38, 85.22, 85.28, 85.07, 85.02, 84.87, 84.71, 84.62, 84.78, 84.35, 84.07, 83.58, 83.40, 82.83, 82.01, 81.17, 79.93, 79.58, 78.41, 76.70, 75.02, 73.10, 71.03, 68.38, 66.60, 64.27, 61.69, 60.61, 58.22, 56.52]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 99.76, 82.69, 23.47, 2.48, 0.08, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]
            elif update_mode == "top_only_[1,2,3]":
                main_task_acc = [85.33, 85.43, 85.38, 85.16, 85.10, 85.09, 84.79, 84.38, 84.18, 83.96, 82.97, 82.59, 81.47, 79.84, 77.57, 75.54, 71.71, 68.86, 64.85, 58.72, 52.21, 47.62, 43.62, 39.34, 36.02, 30.66, 27.46, 22.25, 19.38, 18.10, 15.84]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 88.33, 12.23, 1.53, 0.05, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]
            elif update_mode == "top_only_[1,2,3,4]":
                main_task_acc = [85.33, 85.22, 85.31, 85.18, 85.04, 85.08, 84.85, 84.59, 84.17, 84.03, 83.73, 83.01, 82.09, 80.79, 79.47, 76.88, 75.37, 71.57, 68.34, 62.18, 56.60, 52.67, 49.16, 45.41, 41.23, 37.05, 33.60, 30.67, 27.79, 24.63, 22.49]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 99.15, 41.37, 1.71, 0.04, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]
            elif update_mode == "bottom_top_[1]":
                main_task_acc = [85.33, 85.35, 85.13, 85.25, 85.25, 85.29, 85.18, 85.26, 85.15, 85.14, 85.03, 84.85, 84.83, 84.71, 84.84, 84.56, 84.48, 84.35, 84.32, 84.08, 83.87, 83.75, 83.54, 83.24, 82.67, 82.53, 81.56, 80.42, 79.69, 78.35, 77.61]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[2]":
                main_task_acc = [85.33, 85.26, 85.41, 85.42, 85.23, 85.18, 85.25, 85.15, 85.10, 85.21, 85.04, 84.87, 84.92, 84.95, 84.74, 84.53, 84.56, 84.56, 84.42, 84.14, 83.83, 83.52, 83.16, 82.91, 82.58, 82.52, 81.75, 81.34, 81.10, 80.35, 79.64]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[3]":
                main_task_acc = [85.33, 85.31, 85.41, 85.21, 85.28, 85.21, 85.39, 85.21, 85.15, 85.13, 85.06, 84.98, 84.77, 84.56, 84.01, 82.69, 81.12, 78.34, 74.10, 68.50, 61.86, 56.30, 50.99, 45.56, 40.53, 35.09, 30.87, 28.07, 27.14, 24.31, 22.86]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 64.49, 0.00, 0.00, 0.00, 0.00]
            elif update_mode == "bottom_top_[4]":
                main_task_acc = [85.33, 85.46, 85.36, 85.33, 85.25, 85.36, 85.30, 85.28, 85.29, 85.30, 85.29, 85.30, 85.12, 85.29, 85.28, 85.23, 85.29, 85.19, 85.27, 85.23, 85.11, 85.06, 85.18, 85.15, 85.13, 85.19, 85.08, 85.15, 85.04, 84.97, 84.99]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[1,2]":
                main_task_acc = [85.33, 85.39, 85.33, 85.25, 85.24, 85.10, 84.92, 84.84, 84.76, 84.39, 84.26, 83.95, 83.68, 82.99, 82.62, 81.98, 81.06, 80.44, 79.44, 78.08, 76.90, 74.83, 73.50, 71.17, 68.78, 66.56, 64.93, 63.13, 61.42, 59.44, 56.42]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 99.73, 67.76, 10.57, 0.85, 0.05, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]
            elif update_mode == "bottom_top_[1,2,3]":
                main_task_acc = [85.33, 85.28, 85.19, 85.23, 85.12, 85.07, 84.96, 84.69, 84.21, 84.07, 83.22, 82.50, 81.23, 79.94, 77.92, 75.30, 71.74, 69.37, 65.05, 58.19, 52.72, 47.13, 43.59, 39.15, 35.42, 30.89, 25.75, 22.43, 19.17, 17.02, 15.09]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 97.40, 51.98, 4.26, 0.03, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]
            else:
                raise ValueError
        elif ac == 28:
            if update_mode == "both":
                main_task_acc = [84.60, 84.47, 84.49, 84.50, 84.41, 84.47, 84.39, 84.16, 84.08, 83.82, 83.36, 83.01, 82.53, 81.66, 80.46, 79.15, 77.44, 74.56, 71.23, 67.99, 64.82, 61.91, 59.54, 56.85, 55.77, 54.13, 52.51, 52.09, 50.28, 48.23, 48.14]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_only":
                main_task_acc = [84.60, 84.59, 84.57, 84.57, 84.52, 84.49, 84.47, 84.50, 84.57, 84.58, 84.51, 84.51, 84.60, 84.50, 84.51, 84.58, 84.58, 84.54, 84.37, 84.51, 84.61, 84.56, 84.54, 84.57, 84.58, 84.55, 84.51, 84.48, 84.48, 84.43, 84.46]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[1]":
                main_task_acc = [84.60, 84.64, 84.56, 84.56, 84.44, 84.46, 84.50, 84.51, 84.43, 84.42, 84.27, 84.26, 84.18, 84.15, 84.15, 84.12, 83.95, 83.54, 83.28, 83.23, 82.75, 82.46, 81.69, 80.84, 79.94, 79.19, 78.84, 77.50, 76.44, 75.92, 75.54]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[2]":
                main_task_acc = [84.60, 84.40, 84.57, 84.55, 84.52, 84.49, 84.44, 84.42, 84.49, 84.38, 84.39, 84.38, 84.28, 84.27, 84.20, 84.13, 83.83, 84.08, 83.78, 83.78, 83.50, 83.42, 83.15, 83.09, 82.79, 82.60, 82.35, 82.07, 81.29, 81.07, 80.34]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[3]":
                main_task_acc = [84.60, 84.48, 84.48, 84.60, 84.54, 84.51, 84.54, 84.56, 84.44, 84.40, 84.48, 84.43, 84.40, 84.42, 84.24, 84.16, 84.22, 83.94, 83.66, 83.54, 82.57, 82.01, 80.64, 78.83, 76.31, 73.26, 70.35, 67.27, 64.32, 61.94, 59.41]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 99.53, 0.15, 0.00, 0.00, 0.00, 0.00]
            elif update_mode == "top_only_[4]":
                main_task_acc = [84.60, 84.45, 84.55, 84.40, 84.63, 84.49, 84.53, 84.53, 84.52, 84.59, 84.57, 84.63, 84.49, 84.57, 84.53, 84.66, 84.56, 84.59, 84.58, 84.55, 84.46, 84.66, 84.54, 84.50, 84.45, 84.55, 84.54, 84.51, 84.55, 84.49, 84.57]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[1,2]":
                main_task_acc = [84.60, 84.54, 84.65, 84.53, 84.43, 84.48, 84.44, 84.36, 84.28, 84.27, 84.06, 83.67, 83.58, 83.17, 82.76, 82.46, 81.74, 80.81, 80.16, 78.45, 77.51, 75.90, 74.34, 71.64, 70.96, 68.62, 66.25, 64.91, 62.27, 60.59, 59.36]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 99.99]
            elif update_mode == "top_only_[1,2,3]":
                main_task_acc = [84.60, 84.46, 84.46, 84.45, 84.52, 84.36, 84.19, 84.12, 83.88, 83.89, 83.46, 82.83, 82.50, 81.84, 80.77, 79.96, 77.41, 75.13, 71.78, 67.19, 65.00, 61.11, 58.49, 56.51, 54.50, 52.42, 50.91, 49.54, 48.39, 47.13, 45.67]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[1,2,3,4]":
                main_task_acc = [84.60, 84.58, 84.64, 84.45, 84.56, 84.50, 84.42, 84.17, 84.15, 83.77, 83.41, 82.86, 82.37, 81.51, 80.27, 79.20, 77.05, 75.53, 71.43, 67.76, 65.24, 61.85, 58.39, 57.49, 56.11, 53.56, 52.70, 51.35, 50.07, 48.27, 47.31]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[1]":
                main_task_acc = [84.60, 84.42, 84.58, 84.54, 84.44, 84.52, 84.38, 84.33, 84.46, 84.38, 84.47, 84.29, 84.48, 84.17, 84.08, 84.04, 83.90, 83.62, 83.42, 82.73, 82.44, 81.94, 81.22, 80.73, 80.41, 78.97, 78.20, 77.27, 76.96, 75.79, 74.83]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[2]":
                main_task_acc = [84.60, 84.50, 84.55, 84.52, 84.57, 84.43, 84.50, 84.44, 84.36, 84.31, 84.34, 84.27, 84.33, 84.32, 84.31, 84.14, 84.04, 84.00, 83.91, 83.65, 83.52, 83.60, 83.25, 83.19, 82.95, 82.67, 82.40, 82.26, 81.72, 81.24, 80.61]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[3]":
                main_task_acc = [84.60, 84.49, 84.52, 84.57, 84.58, 84.44, 84.51, 84.49, 84.38, 84.51, 84.52, 84.41, 84.42, 84.40, 84.31, 84.25, 84.15, 84.02, 83.78, 83.31, 82.72, 81.85, 80.59, 78.68, 76.38, 73.07, 70.11, 66.98, 64.14, 61.88, 59.59]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00 , 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 99.80, 0.02, 0.00, 0.00, 0.00, 0.00]
            elif update_mode == "bottom_top_[4]":
                main_task_acc = [84.60, 84.47, 84.52, 84.56, 84.56, 84.62, 84.48, 84.60, 84.52, 84.52, 84.55, 84.47, 84.47, 84.49, 84.62, 84.46, 84.55, 84.62, 84.43, 84.58, 84.46, 84.54, 84.48, 84.42, 84.46, 84.46, 84.45, 84.49, 84.33, 84.58, 84.56]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[1,2]":
                main_task_acc = [84.60, 84.51, 84.57, 84.43, 84.50, 84.44, 84.39, 84.35, 84.25, 84.07, 83.93, 83.76, 83.42, 83.37, 82.88, 82.34, 81.45, 80.63, 79.96, 79.28, 77.22, 76.25, 74.75, 72.31, 69.89, 68.11, 66.37, 64.62, 62.84, 60.91, 58.79]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[1,2,3]":
                main_task_acc = [84.60, 84.48, 84.55, 84.55, 84.33, 84.50, 84.34, 84.18, 84.01, 83.80, 83.59, 83.21, 82.34, 81.70, 81.01, 79.23, 77.19, 74.56, 71.87, 67.31, 64.24, 61.28, 57.45, 55.40, 53.57, 51.94, 50.30, 49.12, 47.65, 46.80, 45.36]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            else:
                raise ValueError
        elif ac == 24:
            if update_mode == "both":
                main_task_acc = [83.35, 83.18, 83.16, 83.05, 83.02, 82.90, 82.70, 82.48, 82.13, 81.97, 81.61, 81.10, 80.29, 79.03, 77.60, 75.92, 73.90, 71.49, 68.68, 65.72, 63.14, 60.45, 56.95, 55.31, 52.51, 50.74, 49.15, 47.19, 45.81, 44.38, 43.30]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_only":
                main_task_acc = [83.35, 83.14, 83.28, 83.35, 83.27, 83.34, 83.18, 83.24, 83.39, 83.20, 83.25, 83.31, 83.37, 83.11, 83.23, 83.32, 83.33, 83.25, 83.32, 83.26, 83.39, 83.24, 83.12, 83.11, 83.22, 83.24, 83.36, 83.37, 83.11, 83.33, 83.17]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[1]":
                main_task_acc = [83.35, 83.23, 83.32, 83.33, 83.10, 83.20, 83.16, 83.08, 83.10, 83.09, 83.03, 82.99, 82.98, 82.74, 82.78, 82.59, 82.45, 82.46, 82.13, 81.94, 81.73, 81.42, 81.17, 80.75, 80.39, 79.89, 79.33, 78.52, 77.66, 76.71, 76.22]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[2]":
                main_task_acc = [83.35, 83.15, 83.17, 83.12, 83.12, 83.03, 83.20, 83.03, 83.12, 83.06, 82.85, 82.90, 82.73, 82.71, 82.69, 82.47, 82.32, 82.33, 81.89, 81.81, 81.73, 81.40, 81.21, 81.04, 80.65, 80.25, 79.62, 79.16, 78.40, 77.54, 76.97]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[3]":
                main_task_acc = [83.35, 83.27, 83.19, 83.45, 83.40, 83.18, 83.11, 83.23, 83.19, 83.10, 83.04, 82.86, 82.78, 82.52, 82.42, 82.30, 81.81, 81.44, 80.91, 79.80, 78.61, 76.25, 73.70, 69.98, 67.03, 63.18, 60.08, 57.01, 53.86, 51.55, 49.55]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[4]":
                main_task_acc = [83.35, 83.29, 83.33, 83.19, 83.30, 83.42, 83.45, 83.25, 83.32, 83.39, 83.27, 83.30, 83.38, 83.32, 83.31, 83.28, 83.30, 83.37, 83.30, 83.31, 83.39, 83.22, 83.39, 83.33, 83.21, 83.32, 83.13, 83.18, 83.15, 83.20, 83.15]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[1,2]":
                main_task_acc = [83.35, 83.20, 83.22, 83.16, 83.09, 83.07, 82.91, 82.82, 82.77, 82.61, 82.46, 82.01, 81.64, 81.15, 80.72, 80.41, 79.52, 78.52, 77.75, 76.25, 73.95, 72.29, 70.34, 68.04, 65.65, 64.55, 62.28, 59.58, 57.67, 55.11, 53.36]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[1,2,3]":
                main_task_acc = [83.35, 83.13, 83.11, 83.18, 82.99, 82.96, 82.63, 82.41, 82.09, 81.92, 81.22, 80.59, 79.49, 78.05, 76.27, 73.94, 71.68, 69.56, 65.67, 62.74, 59.57, 55.91, 53.21, 50.63, 47.85, 45.68, 43.59, 41.65, 38.69, 37.85, 36.07]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "top_only_[1,2,3,4]":
                main_task_acc = [83.35, 83.24, 83.29, 82.99, 83.06, 82.79, 82.72, 82.49, 82.27, 81.72, 81.45, 80.71, 80.20, 78.88, 77.45, 76.21, 73.64, 71.17, 68.89, 65.49, 63.12, 60.33, 57.71, 55.42, 52.27, 50.71, 48.53, 46.51, 45.05, 44.26, 42.04]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[1]":
                main_task_acc = [83.35, 83.06, 83.36, 83.26, 83.31, 83.30, 83.17, 83.08, 83.08, 83.02, 83.04, 83.00, 83.00, 82.83, 82.83, 82.51, 82.44, 82.36, 82.18, 81.96, 81.87, 81.43, 81.14, 80.71, 80.42, 79.69, 79.08, 78.48, 77.67, 76.31, 75.85]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[2]":
                main_task_acc = [83.35, 83.25, 83.22, 83.07, 83.16, 83.06, 83.21, 83.09, 82.99, 82.97, 82.95, 82.90, 82.75, 82.77, 82.61, 82.40, 82.23, 82.06, 82.04, 81.97, 81.69, 81.44, 81.22, 80.84, 80.52, 79.93, 79.62, 79.17, 78.20, 77.19, 76.52]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[3]":
                main_task_acc = [83.35, 83.24, 83.28, 83.19, 83.22, 83.15, 83.23, 83.06, 83.09, 83.19, 83.07, 82.84, 82.85, 82.73, 82.42, 82.18, 81.67, 81.41, 80.83, 80.13, 78.75, 77.05, 74.42, 70.93, 66.94, 63.80, 60.63, 57.30, 53.98, 51.40, 49.57]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[4]":
                main_task_acc = [83.35, 83.26, 83.30, 83.27, 83.41, 83.33, 83.34, 83.28, 83.37, 83.45, 83.39, 83.24, 83.38, 83.39, 83.30, 83.32, 83.34, 83.27, 83.36, 83.23, 83.30, 83.24, 83.16, 83.28, 83.12, 83.16, 83.24, 83.28, 83.28, 83.06, 83.17]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[1,2]":
                main_task_acc = [83.35, 83.34, 83.31, 83.20, 83.10, 83.11, 83.02, 82.93, 82.74, 82.47, 82.14, 82.04, 81.52, 81.28, 80.66, 80.24, 79.29, 78.45, 77.18, 75.98, 73.95, 72.35, 69.89, 67.84, 66.34, 64.54, 62.32, 59.90, 57.91, 55.59, 53.70]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            elif update_mode == "bottom_top_[1,2,3]":
                main_task_acc = [83.35, 83.36, 83.12, 83.09, 83.10, 82.77, 82.53, 82.49, 81.99, 81.57, 80.98, 80.60, 79.84, 78.36, 76.46, 74.81, 71.68, 68.97, 65.22, 62.12, 58.64, 55.69, 53.21, 49.98, 47.11, 44.76, 42.52, 41.57, 39.03, 37.88, 35.91]
                asr = [100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00, 100.00]
            else:
                raise ValueError
        else:
            raise ValueError
    elif dataset == "CINIC10L":
        if ac == 31:
            if update_mode == "top_only_[1]":
                main_task_acc = [72.62, 72.52, 72.49, 72.51, 72.41, 72.27, 72.02, 71.80, 71.60, 71.07, 70.25, 68.90, 67.69, 66.03, 64.35, 61.97, 59.06, 56.55, 54.41, 52.66, 51.05, 49.51, 48.13, 46.95, 46.20, 44.82, 43.74, 42.31, 42.35, 41.59, 41.84]
                asr = [99.98, 99.97, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.99, 99.98, 99.99, 99.99, 99.99, 99.98, 99.98, 99.97, 99.98, 99.97, 99.97, 99.97, 99.96, 99.97, 99.97, 99.97, 99.96, 99.95]
            elif update_mode == "top_only_[2]":
                main_task_acc = [72.62, 72.54, 72.55, 72.36, 72.18, 71.90, 71.00, 70.01, 68.94, 66.92, 66.02, 62.95, 61.28, 60.54, 57.94, 56.01, 54.64, 52.67, 51.38, 50.12, 46.80, 43.49, 42.50, 40.62, 39.76, 38.72, 37.07, 36.34, 35.07, 32.76, 31.02]
                asr = [99.98, 99.97, 99.97, 99.97, 99.95, 99.95, 99.93, 99.93, 99.91, 99.80, 99.87, 99.62, 99.33, 99.40, 99.26, 98.95, 98.50, 98.29, 98.34, 98.28, 97.68, 97.98, 81.44, 36.08, 13.99, 0.53, 0.16, 0.07, 0.03, 0.01, 0.01]
            elif update_mode == "top_only_[3]":
                main_task_acc = [72.62, 72.50, 72.54, 72.43, 72.58, 72.48, 72.42, 72.40, 72.41, 72.19, 71.97, 71.89, 72.02, 71.63, 71.41, 71.24, 71.02, 70.63, 70.39, 70.01, 69.25, 67.86, 65.83, 63.83, 61.47, 59.62, 57.88, 56.12, 53.37, 51.21, 48.70]
                asr = [99.98, 99.97, 99.98, 99.97, 99.98, 99.97, 99.97, 99.97, 99.97, 99.97, 99.96, 99.97, 99.95, 99.95, 99.94, 99.88, 99.77, 98.09, 32.62, 6.68, 1.52, 0.49, 0.17, 0.07, 0.02, 0.02, 0.01, 0.01, 0.00, 0.00, 0.00]
            elif update_mode == "top_only_[4]":
                main_task_acc = [72.62, 72.61, 72.62, 72.66, 72.68, 72.70, 72.70, 72.63, 72.69, 72.70, 72.58, 72.70, 72.65, 72.66, 72.58, 72.58, 72.64, 72.63, 72.53, 72.51, 72.62, 72.59, 72.58, 72.55, 72.46, 72.48, 72.47, 72.45, 72.50, 72.27, 72.29]
                asr = [99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.98, 99.97, 99.98, 99.97, 99.98, 99.97, 99.98, 99.97, 99.98, 99.98, 99.97, 99.98, 99.98, 99.97, 99.98, 99.97, 99.98]
            elif update_mode == "top_only_[1,2]":
                main_task_acc = [72.62, 72.55, 72.37, 71.83, 70.81, 67.90, 65.03, 62.29, 58.49, 55.87, 50.04, 48.82, 45.68, 43.41, 42.03, 40.12, 40.24, 37.90, 37.87, 36.99, 35.33, 33.60, 31.66, 29.96, 27.73, 25.95, 24.95, 22.71, 21.87, 20.36, 19.64]
                asr = [99.98, 99.97, 99.97, 99.96, 99.97, 99.97, 99.94, 99.89, 99.83, 99.64, 99.13, 98.47, 97.64, 94.72, 92.46, 91.57, 91.96, 84.81, 88.48, 88.26, 84.10, 85.92, 86.83, 86.11, 84.50, 79.72, 76.94, 68.13, 49.15, 25.57, 6.10]
            elif update_mode == "top_only_[1,2,3]":
                main_task_acc = [72.62, 72.50, 72.29, 71.88, 69.85, 66.84, 63.29, 60.94, 58.59, 55.23, 51.51, 48.23, 43.12, 39.38, 36.11, 31.23, 27.48, 25.68, 22.57, 20.89, 19.10, 17.59, 16.39, 15.36, 14.19, 13.48, 13.02, 12.37, 11.79, 11.43, 11.20]
                asr = [99.98, 99.97, 99.97, 99.97, 99.97, 99.95, 99.90, 99.86, 99.68, 99.26, 98.56, 97.39, 84.53, 63.27, 31.35, 9.51, 5.25, 1.95, 0.02, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]
            else:
                raise ValueError
        elif ac == 28:
            if update_mode == "top_only_[1]":
                main_task_acc = [71.50, 71.96, 71.88, 71.81, 71.85, 71.74, 71.45, 71.34, 71.57, 71.13, 71.15, 71.01, 70.94, 71.02, 70.65, 70.53, 70.31, 70.12, 69.70, 69.58, 69.03, 68.96, 68.35, 68.00, 67.41, 67.01, 66.10, 64.39, 63.04, 62.21, 60.59]
                asr = [99.78, 99.62, 99.54, 99.55, 99.57, 99.56, 99.51, 99.35, 99.50, 99.46, 99.52, 99.54, 99.43, 99.40, 99.31, 99.45, 99.43, 99.10, 99.23, 99.45, 99.16, 99.33, 99.21, 99.25, 99.04, 99.14, 98.98, 99.07, 98.92, 99.07, 98.96]
            elif update_mode == "top_only_[2]":
                main_task_acc = [71.50, 71.88, 71.92, 71.79, 71.80, 71.76, 71.65, 71.63, 71.33, 71.31, 70.93, 70.45, 69.81, 69.64, 68.89, 68.44, 67.13, 66.46, 65.31, 63.74, 62.06, 60.54, 58.31, 57.50, 55.76, 54.41, 52.79, 52.15, 50.66, 48.94, 47.94]
                asr = [99.78, 99.56, 99.54, 99.57, 99.48, 99.41, 99.28, 99.26, 99.00, 99.10, 98.64, 98.70, 98.08, 97.88, 97.62, 97.82, 96.11, 96.22, 94.24, 92.80, 87.08, 84.80, 73.22, 58.64, 39.30, 43.81, 23.57, 10.78, 9.21, 2.02, 1.87]
            elif update_mode == "top_only_[3]":
                main_task_acc = [71.50, 71.94, 71.89, 71.78, 71.90, 71.85, 71.83, 71.62, 71.59, 71.45, 71.16, 70.56, 70.23, 68.93, 68.23, 67.63, 66.94, 66.32, 65.87, 65.03, 64.81, 63.96, 63.27, 62.04, 61.32, 59.38, 58.52, 57.08, 55.47, 53.87, 52.58]
                asr = [99.78, 99.63, 99.60, 99.64, 99.64, 99.54, 99.49, 99.55, 99.45, 99.51, 99.36, 99.47, 99.40, 99.37, 99.38, 99.49, 99.35, 99.48, 99.32, 99.10, 99.23, 99.24, 99.02, 99.19, 99.14, 98.94, 99.09, 98.83, 98.93, 98.76, 98.52]
            elif update_mode == "top_only_[4]":
                main_task_acc = [71.50, 71.96, 71.96, 71.98, 71.85, 71.93, 71.98, 71.96, 71.87, 71.87, 71.79, 71.82, 71.76, 71.68, 71.83, 71.74, 71.66, 71.67, 71.65, 71.61, 71.60, 71.44, 71.46, 71.39, 71.08, 71.15, 71.39, 71.07, 70.62, 70.75, 70.99]
                asr = [99.78, 99.60, 99.68, 99.62, 99.48, 99.64, 99.60, 99.64, 99.58, 99.66, 99.53, 99.62, 99.56, 99.58, 99.64, 99.61, 99.61, 99.57, 99.65, 99.64, 99.59, 99.62, 99.66, 99.57, 99.59, 99.63, 99.58, 99.59, 99.45, 99.62, 99.49]
            elif update_mode == "top_only_[1,2]":
                main_task_acc = [71.50, 71.85, 71.70, 71.80, 71.64, 71.41, 71.23, 70.93, 70.62, 70.36, 69.87, 69.23, 68.62, 67.76, 66.13, 64.84, 63.43, 62.79, 61.00, 59.49, 57.00, 55.67, 52.78, 51.26, 48.48, 47.81, 46.64, 44.36, 43.41, 41.57, 39.81]
                asr = [99.78, 99.53, 99.39, 99.57, 99.43, 99.39, 99.12, 99.03, 98.95, 98.63, 98.74, 98.65, 98.26, 98.26, 97.25, 97.76, 95.95, 95.69, 94.69, 94.32, 88.65, 85.97, 64.30, 14.76, 3.59, 0.82, 0.31, 0.36, 0.09, 0.11, 0.05]
            elif update_mode == "top_only_[1,2,3]":
                main_task_acc = [71.50, 71.87, 71.69, 71.54, 71.39, 70.81, 70.05, 68.90, 67.61, 66.13, 64.99, 63.42, 61.69, 59.85, 57.81, 55.02, 51.14, 47.86, 45.66, 43.68, 41.55, 40.08, 38.24, 36.58, 34.55, 33.59, 32.04, 30.60, 28.64, 27.48, 27.06]
                asr = [99.78, 99.64, 99.46, 99.32, 99.29, 99.14, 98.96, 99.11, 97.88, 97.76, 97.37, 96.71, 96.02, 94.91, 90.78, 85.09, 61.42, 19.40, 2.74, 1.38, 1.10, 0.50, 0.28, 0.16, 0.05, 0.02, 0.00, 0.00, 0.00, 0.00, 0.00]
            else:
                raise ValueError
        else:
            raise ValueError
    
    return main_task_acc, asr


def plot_acc(main_task_acc, asr, attack_features=31, update_mode="both",
             save_dir="../", pic_type = "png"):
    # 样式参数设置
    linewidth = 1.8
    labelsize = 18
    bwith = 2
    lwith = 2
    markevery=2
    markersize = 8
    ticksize = 12
    x_ticks_gap=5
    legendsize = 16
    legend_loc = "lower left" # upper right, lower right, lower left

    # 创建图形
    fig, ax = plt.subplots(1, 1)# figsize=(16, 9)
   
    # 设置轴的样式
    for spine in ax.spines.values():
        spine.set_linewidth(bwith)
    ax.grid(which="major", ls="--", lw=lwith, c="gray")

    # 颜色映射
    # marker 类型: o: 圆形, *: 五角星, v: 三角形, s: 正方形
    # google 配色: #f4433c 红色, #ffbc32 黄色, #0aa858 绿色, #2d85f0 蓝色
    colors = ['#0aa858', '#f4433c', '#2d85f0', '#ffbc32']
    markers = ['v', 'o', 's', '*']
    
    epochs = list(range(len(main_task_acc)))
    main_task_acc = [acc/100 for acc in main_task_acc]
    asr = [acc/100 for acc in asr]
    
    # 绘制主任务准确率
    ax.plot(
        epochs,
        main_task_acc,
        label=f'Main Task Acc',
        ls="--",
        linewidth=linewidth,
        c=colors[0],
        marker=markers[0],
        markersize=markersize,
        markevery=markevery,
    )
    # 绘制ASR
    ax.plot(
        epochs,
        asr,
        label=f'ASR',
        ls="-",
        linewidth=linewidth,
        c=colors[1],
        marker=markers[1],
        markersize=markersize,
        markevery=markevery,
    )
    
    # 设置x轴
    x_ticks = list(range(0, len(epochs) + 1, x_ticks_gap))
    ax.set_xticks(x_ticks)
    ax.set_xticklabels([f"{x}" for x in x_ticks], fontsize=ticksize)

    # 设置y轴
    ax.set_ylim(-0.05, 1.05)
    y_ticks = np.arange(0, 1.05, 0.2)
    ax.set_yticks(y_ticks)
    ax.set_yticklabels([f"{y:.1f}" for y in y_ticks], fontsize=ticksize)

    # 设置标签和标题
    ax.set_xlabel("Epochs", fontsize=labelsize)
    ax.set_ylabel("Accuracy", fontsize=labelsize)
    
    # 添加Attack Method和Update Mode信息
    # title = f"Attack Method: TECB; Update Mode: bottom_only; Attack Feaure: {attack_features}"
    title = f"AC: {attack_features}; Update Mode: {update_mode}"
    plt.title(title, fontsize=labelsize-2)
    
    ax.legend(fontsize=legendsize, loc=legend_loc,)

    plt.tight_layout()
    os.makedirs(save_dir, exist_ok=True)
    save_fig = os.path.join(save_dir, f"{update_mode}.{pic_type}")
    print(save_fig)
    plt.savefig(save_fig, bbox_inches='tight')
    plt.close()
    

if __name__ == "__main__":
    # acs = [24, 28]
    # update_modes = [
    #     "both",
    #     "bottom_only",
    #     "top_only_[1]",
    #     "top_only_[2]",
    #     "top_only_[3]",
    #     "top_only_[4]",
    #     "top_only_[1,2]",
    #     "top_only_[1,2,3]",
    #     "top_only_[1,2,3,4]",
    #     "bottom_top_[1]",
    #     "bottom_top_[2]",
    #     "bottom_top_[3]",
    #     "bottom_top_[4]",
    #     "bottom_top_[1,2]",
    #     "bottom_top_[1,2,3]",
    # ]
    acs = [28, 31]
    update_modes = [
        "top_only_[1]",
        "top_only_[2]",
        "top_only_[3]",
        "top_only_[4]",
        "top_only_[1,2]",
        "top_only_[1,2,3]",
    ]
    for ac in acs:
        for update_mode in update_modes:
            main_task_acc, asr = get_data(update_mode=update_mode)
            plot_acc(main_task_acc, asr, attack_features=ac, update_mode=update_mode, save_dir=f"../../results/pretest/permuted_training/test_top_layer/CINIC10L/AC_{ac}", pic_type = "png")
